<?php
/**
 * @file
 * Code for the Mailing Lists feature.
 */

include_once 'gb_maillist.features.inc';

  module_load_include('inc', 'g3core', 'g3core.utils');
  
  module_load_include('inc', 'gb_maillist', 'gb_maillist.gfeature');  
  module_load_include('inc', 'gb_maillist', 'gb_maillist.constants');
  module_load_include('inc', 'gb_maillist', 'gb_maillist.queries');
  module_load_include('inc', 'gb_maillist', 'gb_maillist.api');
  
  function _in_cli() {
    if (php_sapi_name() != 'cli') {
      return FALSE;
    }
    
    return TRUE;
  }
  
  function _is_forum_topic($node) {
    if ($node->type !== 'forum') {
      return FALSE;
    }
    
    if (!_in_cli()) {
      // Is this coming from the forum post topic form that we've hooked?
      if ($node->form_id != 'forum_node_form') {
        return FALSE;
      }
    }
    
    return TRUE;
  }
  
  function _is_forum_comment($comment) {
    if ($comment->node_type !== 'comment_node_forum') {
      return FALSE;
    }
    
    if (!_in_cli()) {
      // Is this coming from the forum post comment form?
      if ($comment->form_id !== 'comment_node_forum_form') {
        return FALSE;
      }
    }
    
    return TRUE;
  }
  
  function _get_forum_tid_from_topic_node($node) {
    // Do we have an attached forum taxonomy?
    if (!isset($node->taxonomy_forums)) {
      return FALSE;
    }
    
    return $node->taxonomy_forums[LANGUAGE_NONE][0]['tid'];
  }
  
  /*
   * Fetch a list of outgoing email addresses from other modules
   * and sanitize the list in various ways.
   */
  function _fetch_outgoing_email_addresses($tid, $items) {
    $result = array();
    
    $lists = array();
    // Aggregate the items by module and storage class id
    foreach ($items as $item) {
      $module = $item['module'];
      $class_id = $item['class'];
      $item_id = $item['item'];
      
      $lists[$module][$class_id][] = $item_id;
    }
    
    // Get the e-mails from the providing modules
    foreach ($lists as $module => $classes) {
      foreach ($classes as $class_id => $items) {
        // Get the emails for the item id
        $addresses = call_user_func($module . 
            '_provide_email_addresses_for_class_items', $class_id, $items);
        if (!empty($addresses)) {
          $result = array_merge($result, $addresses);
        }
      }
    }
    
    // Filter out the duplicates
    $result = array_unique($result);
    
    // Remove any blacklisted e-mails
    $blacklisted = _fetch_blacklisted_emails_for_tid($tid);
    $result = array_diff($result, $blacklisted);
    
    // Give other modules a chance to alter the emails
    drupal_alter('outgoing_email_addresses', $result);
    
    return $result;
  }
  
  /* 
   * Retrieve the mailing list descriptors from other modules
   */
  function _fetch_mailing_list_descriptors() {
    $descriptors = array();
    // We have no default or provided descriptors
    // so let the other modules alter the descriptors
    drupal_alter('mailing_list_descriptors', $descriptors);
    
    foreach (array_keys($descriptors) as $key) {
      if (strlen($key) > DRUPAL_EXTENSION_NAME_MAX_LENGTH) {
        throw new Exception('Module name length exceeds ' . 
            'DRUPAL_EXTENSION_NAME_MAX_LENGTH');
      }
    } 
    
    return $descriptors;
  }
  
  function _get_base_url() {
    global $base_url;
    return $base_url;
  }
  
  function _dispatch_emails_for_post($nid, $metadata, $subject, $body, $alt, 
      $update, $plain, $attachment_fids, $in_reply) {
    $tid = $metadata['tid'];
    $list_type = $metadata['list_type'];
    $user = g3core_get_user();

    $items = _fetch_list_items_for_tid($tid);
    if (empty($items)) {
      // We should always have items attached to a mailing list
      drupal_set_message(t('Mailing list has no attached lists'), 'error');
      return;
    }
    
    $addresses = _fetch_outgoing_email_addresses($tid, $items);
    // Remove the current user's e-mail (who is sending this e-mail)
    // from the outgoing list
    if (!variable_get('gb_maillist_send_copy_to_sender', FALSE)) {
      if ($user->mail) {
        $addresses = array_diff($addresses, array($user->mail));
      }
    }
    
    if (empty($addresses)) { 
      drupal_set_message(t('Failed to retrieve any emails for list'), 'error');
      return;
    }
    
    $base_url = _get_base_url();
    $domain = g3core_get_domain();
    
    // global $user is not a complete object, no fields
    $user = user_load($user->uid);
    
    // Construct a username
    if (isset($user->field_first_name[LANGUAGE_NONE])) {
      $username = $user->field_first_name[LANGUAGE_NONE][0]['value'];
      if (isset($user->field_last_name[LANGUAGE_NONE])) {
        $username .= ' ';
        $username .= $user->field_last_name[LANGUAGE_NONE][0]['value'];
      }
    } else {
      $username = $user->name;
    }

    // Setup some variables
    $aliases = _fetch_list_aliases_for_tid($tid);
    if (empty($aliases)) {
      drupal_set_message(t('Failed to retrieve any aliases for the list'),
          'error');
      return;
    }
    $alias = $aliases[0]['alias'];
    // Append the alias to the subject e.g. [board]
    $subject = "[{$alias}] {$subject}";      
    // Append 'RE: ' if it's an outgoing comment
    if ($in_reply) {
       $subject = "RE: {$subject}"; 
    }
    $bounces = "bounces@{$domain}";
    $sender = "{$alias}@{$domain}";
    $reply_to = "\"{$alias}\" <{$sender}>";
    $from = "\"{$username} via {$alias}\" <{$sender}>";
    if (is_null($reply_to)) {
      drupal_set_message(t('Failed to generate a reply-to e-mail'), 'error');
      return;
    }
    
    // Store the node id for the template
    global $_nid;
    $_nid = $nid;  

    // Dispatch the e-mail
    $dispatcher = new EmailDispatcher($sender, $bounces, TRUE);
    $operations = array();
    
    foreach ($addresses as $address) {
      $email = new EmailMimeEmail('standard', array());
      $email->set_paths($address, $from, $reply_to);
      $email->set_subject($subject);
      $email->set_main_body($body, $plain);
      if (!$plain) {
        $email->set_alt_body($alt);
      }
      // Attach files
      if (!empty($attachment_fids)) {
        foreach ($attachment_fids as $fid) {
          $file = file_load($fid);
          $email->add_attachment($file->uri, $file->filemime);
        }
      }
      if (0) { // PLACEHOLDER
        // Set unsubscribe
        $mailto = "<mailto:unsubscribe-{$tid}@{$domain}>";
        $email->add_header('List-Unsubscribe', $mailto);
      } else {
        // Set headers for standard lists
        $email->add_header('Precedence', 'bulk');
        $email->add_header('List-Id', "<{$nid}.{$domain}>");
        $email->add_header('Message-Id', "<{$nid}.{$tid}@{$domain}>");
      }
    
      $operations[] = array('_dispatch_email', array($dispatcher, $email));
    }

    // Don't use batch if we've been called from Drush
    // TODO: Batch with 'progressive' => FALSE??
    if (_in_cli()) {
      $dispatched = 0;
      foreach ($operations as $operation) {
        $result = $operation[1][0]->dispatch($operation[1][1]);
        
        if ($result) {
          $dispatched += 1;
        } else {
          $message = t('Failed to send e-mail to %to.', 
              array('%to' => $result['to']));
          watchdog('gb_maillist', $message);
        }
      }
      
      $message = t('Dispatched @count of @total e-mail.', 
          array('@count' => $dispatched, '@total' => count($operations)));
      watchdog('gb_maillist', $message);
    } else { // use batch
      $batch = array(
        'title' => t('Dispatching e-mail'),
        'operations' => $operations,
        'finished' => '_dispatch_email_finished',
        'file' => drupal_get_path('module', 'gb_maillist') . 
            '/gb_maillist.batch.inc',
      );
      
      batch_set($batch);
    }
  }

  function _node_update_and_insert($node) {
    if (!_is_forum_topic($node)) {
      return;
    }
    
    if (variable_get('gb_maillist_outgoing_disabled', FALSE)) {
      return;
    }
    
    $tid = _get_forum_tid_from_topic_node($node);
    if (!$tid) {
      drupal_set_message(t('Forum node has no attached tid'), 'error');
      return;
    }
    
    $metadata = _fetch_list_metadata_for_tid($tid);
    if (!$metadata) {
      return; // there is no mailing list attached to this forum
    }
    
    $update = !$node->is_new;
    
    if (_in_cli()) {
      // Pass unfiltered body from incoming e-mail
      global $_unfiltered_html;
      $body = $_unfiltered_html;
      $alt = 'To view this e-mail you need an HTML compatible e-mail client.';
    } else {
      // Pass node body with summary as alt_body if it's available
      $body = $node->body[LANGUAGE_NONE][0]['value'];
      if (isset($node->body[LANGUAGE_NONE][0]['summary']) &&
          !empty($node->body[LANGUAGE_NONE][0]['summary'])) {
        $alt = drupal_html_to_text($node->body[LANGUAGE_NONE][0]['summary']);
      } else {
        $alt = 'To view this e-mail you need an HTML compatible e-mail client.';
      }
    }
    
    if (0) {
      $plain = ($node->body[LANGUAGE_NONE][0]['format'] === 'plain_text');
    } else {
      $plain = FALSE; // always send HTML
    }
    
    $subject = $node->title;
    
    $fids = array();
    if (isset($node->field_attachment[LANGUAGE_NONE])) {
      foreach ($node->field_attachment[LANGUAGE_NONE] as $attachment) {
        $fids[] = $attachment['fid'];
      }
    }
    
    _dispatch_emails_for_post($node->nid, $metadata, $subject, $body, $alt,
        $update, $plain, $fids, FALSE); 
  }
  
  function _comment_update_and_insert($comment) {
    if (!_is_forum_comment($comment)) {
      return;
    }
    
    if (variable_get('gb_maillist_outgoing_disabled', FALSE)) {
      return;
    }
    
    // Load the topic node to get the parent tid
    $node = node_load($comment->nid);
    $tid = _get_forum_tid_from_topic_node($node);
    if (!$tid) {
      drupal_set_message(t('Forum node has no attached tid'), 'error');
      return;
    }
    
    $metadata = _fetch_list_metadata_for_tid($tid);
    if (!$metadata) {
      return; // There is no mailing list attached to this forum
    }
    
    // Comment doesn't have the property is_new like node.
    // However, there is a 'new' property (integer) set to 0 for update
    // However, the property doesn't exist on insert?
    $update = FALSE;
    if (property_exists($comment, 'new')) {
      if ($comment->new === 0) {
        $update = TRUE;
      }
    }
    
    if (_in_cli()) {
      global $_unfiltered_html;
      $body = $_unfiltered_html;
    } else {
      $body = $comment->comment_body[LANGUAGE_NONE][0]['value'];
    }
    
    $alt = 'To view this e-mail you need an HTML compatible e-mail client.';
    
    if (0) {
       $plain = ($comment->comment_body[LANGUAGE_NONE][0]['format'] 
          == 'plain_text');
    } else {
      $plain = FALSE; // always send HTML
    }
    
    $subject = $comment->subject;
    
    $fids = array();
    if (isset($comment->field_attachment[LANGUAGE_NONE])) {
      foreach ($comment->field_attachment[LANGUAGE_NONE] as $attachment) {
        $fids[] = $attachment['fid'];
      }
    }
    
    _dispatch_emails_for_post($node->nid, $metadata, $subject, $body, $alt,
        $update, $plain, $fids, TRUE);
  }

  function _extract_values_with_keys_that_match_pattern($values, $pattern) {
    $result = array();
    
    foreach ($values as $key => $value) {
      if (is_string($key)) {
        if (preg_match($pattern, $key)) {
          $result[$key] = $value;
        }
      }
    }
    
    return $result;
  }

  function _fetch_forum_form_default_values($tid) {
    $defaults = array(
        'create_list' => 0,
        'list_type' => _MAILING_LIST_TYPE_STANDARD,
        'aliases' => NULL,
     );
    
    if (!is_null($tid)) {
      // Default metadata
      $metadata = _fetch_list_metadata_for_tid($tid);
      if (!$metadata) { // No attached metadata?
        return $defaults;
      }
      
      $current = array(
        'create_list' => 1,
        'list_type' => $metadata['list_type'],
      );
      
      // Default list items
      $items = _fetch_list_items_for_tid($tid);
      if (empty($items)) {
        // We should always have items attached to a mailing list
        drupal_set_message(t('Mailing list has no attached lists'), 'error');
        return;
      }
      
      foreach ($items as $item) {
        // scid:<storage_class_id>
        $scid = 'scid:' . $item['class'];
        // iid:<module>:<storage_class_id>:<item_id>
        $siid = 'iid:' . $item['module'] . ':' . 
            $item['class'] . ':' . $item['item'];
        
        $current[$scid][] = $siid;
      }
      
      // Default aliases
      $aliases = _fetch_list_aliases_for_tid($tid);
      $current['aliases'] = array_reduce($aliases, function ($carry, $item) {
        if ($carry) $carry .= ', ';
        $carry .= $item['alias'];
        return $carry;
      }); 
      
      return $current;
    }

    return $defaults;
  }

  /**
   * Insert our elements into the forum form
   */
  function _insert_mailing_list_elements(&$form, &$form_state, 
      $descriptors, $defaults) {
    // Create the mailing list fieldset
    $form['mailing_list'] = array(
      '#type' => 'fieldset',
      '#title' => 'Mailing list',
      '#collapsible' => TRUE,
    );
    $fieldset = &$form['mailing_list'];
    
    // Checkbox whether or not to attach a mailing list
    $fieldset['create_list'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create a mailing list'),
      '#description' => t('Create a mailing list that is'
          . ' associated with this board.'),
      '#return_value' => 1, 
      '#default_value' => $defaults['create_list'], 
    );
    
    // Group of elements to set the list options 
    $fieldset['list_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Options'),
      //'#collapsible' => TRUE,
      //'#collapsed' => $collapsed,
      '#states' => array(
        // visible if we are attaching a list
        'visible' => array(
          ':input[name="create_list"]' => array('checked' => TRUE),
        ),
      ),
    );
    
    $fieldset['list_options']['summary'] = array(
      '#markup' => '<br />' . t('A mailing list allows you to send to and' . 
          ' receive e-mail from a list of recipients.'),
    );
    
    $options = array(
      _MAILING_LIST_TYPE_STANDARD => t('Standard mailing list'),
    );
    $fieldset['list_options']['list_type'] = array(
      '#type' => 'radios',
      '#title' => t('List type'),
      '#description' => t('The type of mailing list to create.'),
      '#options' => $options,
      '#default_value' => $defaults['list_type'],
      '#states' => array(
        // visible if we are attaching a list
        'visible' => array( 
          ':input[name="create_list"]' => array('checked' => TRUE),
        ),
      ),
    );
    
    $description = t('A list of aliases for this mailing list separated by' .
        ' commas. These aliases are used to e-mail this mailing list.' .
        ' For example, you could use the alias \'members\' if you wanted the' .
        ' e-mail address for this mailing list to be' .
        ' \'members@yourchorus.com\' or \'members, users\' if you wanted the' .
        ' e-mail addresses \'members@yourchorus.com\' and' .
        ' \'users@yourchorus.com\' to both point to this mailing list.' .
        ' The only valid characters are lowercase letters, underscores and' .
        ' full stops (periods). Full stops can\'t be the first or last' .
        ' character and cannot be in sequence (\'a.b\' is legal but \'a..b\'' . 
        ' is illegal). Aliases must be unique (can\'t occur more than once).');
    $fieldset['list_options']['aliases'] = array(
      '#type' => 'textfield',
      '#title' => t('List aliases'),
      '#description' => $description,
      '#default_value' => $defaults['aliases'],
      '#maxlength' => 128,
      '#size' => 32,
      '#states' => array(
        // visible & required if we are attaching a list
        'visible' => array( 
          ':input[name="create_list"]' => array('checked' => TRUE),
        ),
        'required' => array( 
          ':input[name="create_list"]' => array('checked' => TRUE),
        ),
      ),
    );
    
    // Elements to set which items are included in the list
    $fieldset['items'] = array(
      '#type' => 'fieldset',
      '#title' => t('Recipients'),
      //'#collapsible' => TRUE,
      //'#collapsed' => $collapsed,
      '#states' => array(
        // visible if we are attaching a list
        'visible' => array(
          ':input[name="create_list"]' => array('checked' => TRUE),
        ),
      ),
    ); 
    
    foreach ($descriptors as $module => $classes) {
      foreach ($classes as $class_id => $class) {
        // serialize id for storage & parsing
        // SCID:CLASS
        $scid = 'scid:' . $class_id;
        $fieldset['items'][$scid] = array(
          '#type' => count($class['items']) < 20 ? 'checkboxes' : 'select',
          '#multiple' => TRUE,
          '#prefix' => '<div style="float: left; margin: 15px;">', 
          '#suffix' => '</div>',
          '#title' => $class['title'],
          '#description' => $class['description'],
          '#default_value' => isset($defaults[$scid]) ? 
              $defaults[$scid] : array(),
          '#options' => array(),
          '#states' => array(
            // visible if we are attaching a list
            'visible' => array( 
              ':input[name="create_list"]' => array('checked' => TRUE),
            ),
          ),
        ); 
        foreach ($class['items'] as $item_id => $item) {
          // serialize id for storage & parsing
          // IID:MODULE:CLASS:ITEM
          $siid = 'iid:' . $module . ':' . $class_id . ':' . $item_id;
          $fieldset['items'][$scid]['#options'][$siid] = $item['title'];
        }
      } 
    }
  }

  /** Form callback for notifications settings form */
  function gb_maillist_settings_form($form, &$form_state) {
    $form = array(
      'gb_maillist_outgoing_disabled' => array(
        '#type' => 'checkbox',
        '#title' => t('Disable outgoing e-mail'),
        '#description' => t('If set the mailing lists will not send e-mail.'),
        '#default_value' => variable_get(
            'gb_maillist_outgoing_disabled', FALSE),
      ),
      'gb_maillist_incoming_disabled' => array(
        '#type' => 'checkbox',
        '#title' => t('Disable incoming e-mail'),
        '#description' => t('If set the mailing lists will not accept' .
            ' incoming e-mail.'),
        '#default_value' => variable_get(
            'gb_maillist_incoming_disabled', FALSE),
      ),
      'gb_maillist_send_copy_to_sender' => array(
        '#type' => 'checkbox',
        '#title' => t('Send copy of outgoing e-mail to the original sender'),
        '#description' => t('If set the mailing lists will send a copy of all' .
            ' outgoing e-mail to the original sender, whether posted in the' .
            ' boards or mailed in.'),
        '#default_value' => variable_get(
            'gb_maillist_send_copy_to_sender', FALSE),
      ),
    );
    
    return system_settings_form($form);
  }
      
  /**
   * Validation function for forum_node_form
   * 
   * @param array $form
   * @param array $form_state
   */
  function gb_maillist_forum_node_form_validate($form, &$form_state) {
    // Determine if the outgoing e-mail that will be generated is > max size
    $email_max_size = variable_get('gb_maillist_email_max_size');
    /** @todo stop arbitrarily reserving 4KB for the headers/css */
    $size = 4 * 1024;
    
    /** @todo don't assume strings aren't multi-byte / unicode */
    $size += strlen($form_state['values']['body'][LANGUAGE_NONE][0]['value']);
    foreach ($form_state['values']['field_attachment'][LANGUAGE_NONE] as 
        $attachment) {
      $file = file_load($attachment['fid']);
      if ($file) {
        $size += $file->filesize;
      }
    }
    
    if ($size > $email_max_size) {
      $in_mb = $email_max_sizes / 1024 / 1024;
      form_set_error('field_attachment', 
          t("The e-mail message is too large. Max allowed size: {$in_mb} MB"));
    }
  }
  
  /**
   * Validation function for comment_node_forum_form
   * 
   * @param array $form
   * @param array $form_state
   */
  function gb_maillist_form_comment_node_forum_form_validate($form, 
      &$form_state) {
    // Determine if the outgoing e-mail that will be generated is > max size
    $email_max_size = variable_get('gb_maillist_email_max_size');
    /** @todo stop arbitrarily reserving 4KB for the headers/css */
    $size = 4 * 1024;
    
    /** @todo don't assume strings aren't multi-byte / unicode */
    $size += strlen(
        $form_state['values']['comment_body'][LANGUAGE_NONE][0]['value']);
    foreach ($form_state['values']['field_attachment'][LANGUAGE_NONE] as 
        $attachment) {
      $file = file_load($attachment['fid']);
      if ($file) {
        $size += $file->filesize;
      }
    }
    
    if ($size > $email_max_size) {
      $in_mb = $email_max_sizes / 1024 / 1024;
      form_set_error('field_attachment', 
          t("The e-mail message is too large. Max allowed size: {$in_mb} MB"));
    }
  }
      
  /**
   * Validation function for forum form
   *
   * @param array $form
   * @param array $form_state 
   */
  function gb_maillist_forum_form_validate($form, &$form_state) {
    if ($form_state['values']['create_list'] !== 1) {
      return; // Not including a mailing list
    }
    
    /** 
     * The internal drupal form validator can't seem to handle
     * '#required' changes by jQuery for the forum_form when the elements
     * are in our field set. So, we'll validate them manually. We need to make
     * sure they are valid e-mails as well.
     * 
     * We also need to check if a mailing list item was selected.
     * 
     * We also need to check if the aliases aren't duplicates, aren't empty
     * and don't contain invalid characters.
     * 
     * @todo bug report or determine if the #states code isn't correct
     */
    $values = &$form_state['values'];
    $list_options = &$form['mailing_list']['list_options'];

    if (empty($values['aliases'])) {
      $title = $list_options['aliases']['#title'];
      form_set_error('aliases', t("{$title} is required."));
    }
    
    // A string of aliases separated by commas => an array of aliases
    $aliases = $form_state['values']['aliases'];
    $aliases = explode(',', $aliases);
    array_walk($aliases, function(&$value) { $value = ltrim($value); });
    
    if (count($aliases) != count(array_unique($aliases))) { // has duplicates
      form_set_error('aliases', 
          t('Aliases must be unique and cannot be empty.'));
    }
    
    // Check each alias for various cases
    foreach ($aliases as $key => $value) {
      if (empty($value)) {
        form_set_error('aliases', 
            t('Aliases must be unique and cannot be empty.'));
      } elseif (!preg_match('/^[a-z_]([a-z_]|\.[a-z_])+$/', $value)) {
        form_set_error('aliases', 
            t("Alias '{$value}' is not valid."));
      } else if (in_array($value, 
          variable_get('gb_maillist_reserved_aliases', array()))) {
        form_set_error('aliases', t("Alias '{$value}' is reserved."));
      } elseif (_check_for_alias_record($value, isset($values['tid']) ? 
          $values['tid'] : NULL)) {
        form_set_error('aliases', 
            t("Alias '{$value}' is already in use by another mailing list."));
      }     
    }
    
    // Save the verified aliases in the form
    $values['verified_aliases'] = $aliases;
    
    // TODO: Ugh...
    $a_list_item_is_checked = FALSE;

    $list_classes = _extract_values_with_keys_that_match_pattern(
        $form_state['values'], '/^scid:.*$/');
    foreach ($list_classes as $class) {
      foreach ($class as $item_key => $item_value) {
        if ($item_key === $item_value) { // checked if value === key
          $a_list_item_is_checked = TRUE;
          break 2; // break out of inner & outter loop         
        }
      }
    }

    if (!$a_list_item_is_checked) {
      form_set_error('items', t('At least one mailing list item is required.'));
    }
  }
  
  /**
   * Submit function for forum form
   * 
   * @param array $form
   * @param array $form_state 
   */
  function gb_maillist_forum_form_submit($form, &$form_state) {
    $values = &$form_state['values'];
    $create = $values['create_list'];
    $tid = $values['tid'];
    
    if (!$create) {
      $result = _delete_all_list_records_for_tid($tid);
    } else {
      $result = _build_and_merge_list_records_for_tid($tid, $values);
    }
    
    if (!$result) {
      drupal_set_message(t('Failed to query the database'), 'error');
      $form_state['rebuild'] = TRUE;
    }
  }
  
  /**
   * Implements hook_form_FORM_ID_alter()
   * 
   * @param array $form nested array of form elements that comprise the form
   * @param array $form_state an array containing the current state of the form
   * @param string $form_id string representing the name of the form itself
   */
  function gb_maillist_form_forum_form_forum_alter(&$form, 
      &$form_state, $form_id) {

    // Change title
    drupal_set_title(t('Discussion boards'));
    
    // Alter some form elements to change forum -> board
    $form['name']['#title'] = t('Board name');
    $form['description']['#description'] = t('Description and guidelines for' .
        ' discussions within this board.');
    $form['parent'][0]['#description'] = t('Boards may be placed at the top' .
        ' (root) level, or inside another container or board');
    $form['weight']['#description'] = t('Boards are displayed in ascending' . 
        ' order by weight (boards with equal weights are displayed' .
        ' alphabetically).');
        
    // Do the same for forum_access elements
    $form['forum_access']['template']['taxonomy'][1]['#title'] = 
        t('Template board');
    $form['forum_access']['template']['taxonomy'][1]['#description'] = 
        t('Select a board and click [Load] to retrieve that boards\'s' .
        ' settings as a starting point for this board or container.');
    $form['forum_access']['template']['load_for_new']['#title'] = t('Use the' .
        ' selected forum\'s settings as defaults for new forums and' .
        ' containers.');
    $form['forum_access']['grants']['col_ids']['view']['#markup'] = 
        t('View this board');
    $form['forum_access']['grants']['col_ids']['create']['#markup'] = 
        t('Post / e-mail to this board');
    $form['forum_access']['interference']['#access'] = FALSE;  
    $form['forum_access']['troubleshooting']['#access'] = FALSE;
    
    // Hide acl fieldset if present
    if (isset($form['forum_access']['acl'])) {
      $form['forum_access']['acl']['#access'] = FALSE;
    }
    
    // Insert our form elements
    $descriptors = _fetch_mailing_list_descriptors();
    // Typically NULL for new forms, fill to current values in db on edit
    $defaults = _fetch_forum_form_default_values(
        isset($form['tid']) ? $form['tid']['#value'] : NULL);
    _insert_mailing_list_elements($form, $form_state, $descriptors, $defaults);
    
    $form['#submit'][] = 'gb_maillist_forum_form_submit';
    $form['#validate'][] = 'gb_maillist_forum_form_validate';
    
    // Reorder the element weights
    $form['name']['#weight'] = 0;
    $form['description']['#weight'] = 1;
    $form['parent']['#weight'] = 2;
    $form['weight']['#weight'] = 3;
    $form['mailing_list']['#weight'] = 4;
    $form['forum_access']['#weight'] = 5;
    $form['actions']['#weight'] = 6;
  }

  /** 
   * Implements hook_page_alter()
   * @param array $page array of elements that comprise the page
   */
  function gb_maillist_page_alter(&$page) {
    if (stristr(current_path(), 'admin/structure/forum/add/forum')) {
      $page['help']['system_help']['#markup'] = t('A discussion board holds' . 
          ' related board topics and may optionally contain a mailing list.');
    }
  }

  /**
   * Implements hook_form_FORM_ID_alter()
   * 
   * @param array $form nested array of form elements that comprise the form
   * @param array $form_state an array containing the current state of the form
   * @param string $form_id string representing the name of the form itself
   */
  function gb_maillist_form_forum_confirm_delete_alter(&$form, 
      &$form_state, $form_id) {
     // Insert our submit handler for deleting of forums
     $form['#submit'][] = 'gb_maillist_forum_confirm_delete_submit';
  }
      
  /**
   * Implements hook_form_FORM_ID_alter()
   * 
   * @param array $form nested array of form elements that comprise the form
   * @param array $form_state an array containing the current state of the form
   * @param string $form_id string representing the name of the form itself
   */
  function gb_maillist_form_forum_node_form_alter(&$form, 
      &$form_state, $form_id) {
    if (current_path() == 'node/add/forum') {
      // Content->Add Content, do nothing
    } else {
      // Hide move/post to forum choice
      $form['taxonomy_forums']['#access'] = FALSE;
      
      // Hide shadow copy element
      $form['shadow']['#access'] = FALSE;
              
      $tid = arg(3);
      if (is_numeric($tid) && $tid > 0) {
        // node/add/forum/%, hide element to select forum to post to
        $form['taxonomy_forums'][LANGUAGE_NONE]['#access'] = FALSE;
      } else {
        // ajax, fill default value of forum to post to
        $complete_form = $form_state['complete form'];
        $form['taxonomy_forums'][LANGUAGE_NONE]['#default_value'] =
            $complete_form['taxonomy_forums'][LANGUAGE_NONE]['#default_value'];
      }
    }
    
    // Install validation handler
    $form['#validate'][] = 'gb_maillist_forum_node_form_validate';
  }
      
  /**
   * Implements hook_form_FORM_ID_alter()
   * 
   * @param array $form nested array of form elements that comprise the form
   * @param array $form_state an array containing the current state of the form
   * @param string $form_id string representing the name of the form itself
   */
  function gb_maillist_form_comment_node_forum_form_alter(&$form, &$form_state, 
      $form_id) {
    // Hide subject & set value
    $form['subject']['#access'] = FALSE;
    $form['subject']['#default_value'] = $form['#node']->title;
    
    $form['#validate'][] = 'gb_maillist_form_comment_node_forum_form_validate'; 
  }   
      
  /**
   * Implemenets hook_menu()
   */
  function gb_maillist_menu() {
    return array(
      'g/comm/maillist/source/%/%/%' => array(
        'title' => t('View the original e-mail source'),
        'page callback' => 'gb_maillist_view_source_page',
        'page arguments' => array(4 ,5, 6), // tid, nid, cid as arguments
        'access arguments' => array('administer forums'),
        'file' => 'gb_maillist.pages.inc',
        'type' => MENU_CALLBACK,
      ),
      'g/comm/maillist/view/%' => array(
        'title' => t('View the e-mail(s) assocated with a mailing list'),
        'page callback' => 'gb_maillist_view_list_page',
        'page arguments' => array(4), // tid as argument
        'access arguments' => array('administer forums'),
        'file' => 'gb_maillist.pages.inc',
        'type' => MENU_CALLBACK,
      ),
      'g/comm/maillist/export/%' => array(
        'title' => t('Export a mailing list to CSV'),
        'page callback' => 'gb_maillist_export_list_page',
        'page arguments' => array(4), // tid as argument
        'access arguments' => array('administer forums'),
        'file' => 'gb_maillist.pages.inc',
        'type' => MENU_CALLBACK,
      ),
      'g/comm/maillist/unsubscribe/%/%' => array(
        'title' => t('Unsubscribe from a mailing list'),
        'page callback' => 'gb_maillist_unsubscribe_from_list_page',
        'page arguments' => array(4, 5), // nid, email as arguments
        'access arguments' => array(TRUE),
        'file' => 'gb_maillist.pages.inc',
        'type' => MENU_CALLBACK,
      ),
      'g/comm/maillist/board' => array(
        'title' => t('Discussion Boards / Mailing Lists'),
        'page callback' => 'gb_maillist_forums_page',
        'page arguments' => array(),
        'access arguments' => array('view forums'),
        'file' => 'gb_maillist.pages.inc',
        'type' => MENU_NORMAL_ITEM,
      ),
      'admin/config/groupanizer/maillists' => array(
        'title' => t('Mailing lists'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gb_maillist_settings_form'),
        'access arguments' => array('administer forums'),
        'type' => MENU_NORMAL_ITEM,
      ),
    );
  }
 
 /**
  * Implements hook_menu_alter()
  */
  function gb_maillist_menu_alter(&$items) {
    // Disable the forum page
    $items['forum']['access callback'] = FALSE;
  }

  /**
   * Implements hook_preprocess_breadcrumb
   */
  function gb_maillist_preprocess_breadcrumb(&$variables) {
    // Adjust forum breadcrumbs
    if (isset($variables['breadcrumb'])) {
      if (isset($variables['breadcrumb'][1])) {
        $breadcrumb = $variables['breadcrumb'][1];
        if (preg_match("/^.*Forums.*$/", $breadcrumb)) {
          $rightmost = array_slice($variables['breadcrumb'], 2);
          
          $variables['breadcrumb'] = array();
          $variables['breadcrumb'][0] = '<a href="/" id="&lt;front&gt;">' .
              'Home</a>';
          $variables['breadcrumb'][1] = '<a href="/g/comm" id="g-comm">' .
              'Communicate</a>';
          $variables['breadcrumb'][2] = '<a href="/g/comm/maillist/board"' . 
              ' id="board">Discussion Boards</a>';
          
          foreach ($rightmost as $breadcrumb) {
            $variables['breadcrumb'][] = $breadcrumb;
          }
        }
      }
    }
  }
      
  /**
   * Implements hook_admin_paths_alter()
   */
  function gb_maillist_admin_paths_alter(&$paths) {
    $paths['g/comm/maillist/source/%/%/%'] = TRUE;
    $paths['g/comm/maillist/view/%'] = TRUE;
    $paths['g/comm/maillist/export/%'] = TRUE;
    $paths['g/comm/maillist/unsubscribe/%/%'] = TRUE;
  }
  
  /**
   * Implements hook_admin_paths()
   */
  function gb_maillist_admin_paths() {
    return array(
      'g/comm/maillist/source/%/%/%' => TRUE,
      'g/comm/maillist/view/%' => TRUE,
      'g/comm/maillist/export/%' => TRUE,
      'g/comm/maillist/unsubscribe/%/%' => TRUE,
    );
  }
  
  /**
   * Implements hook_node_insert()
   */
  function gb_maillist_node_insert($node) {
    // Drush incoming mail command has to save the node twice
    // in order to attach files in the correct directory
    // so, ignore inserts from the CLI and just use update
    if (!_in_cli()) {
      _node_update_and_insert($node);
    }
  }
  
  /**
   * Implements hook_node_update()
   */
  function gb_maillist_node_update($node) {
    _node_update_and_insert($node);
  }
  
  /**
   * Implements hook_comment_insert()
   */
  function gb_maillist_comment_insert($comment) {
    _comment_update_and_insert($comment);
  }
  
  /**
   * Implements hook_comment_update()
   */
  function gb_maillist_comment_update($comment) {
    _comment_update_and_insert($comment);
  }
  
  /**
   * Implements hook_permission()
   */
  function gb_maillist_permission() {
    return array(
      'view forums' => array(
        'title' => t('View the forums'),
        'description' => t('This is a top-level permission that allows users' .
            ' to view the forums'),
      ),
    );
  }
  
  /**
   * Implements hook_notification()
   */
  function gb_maillist_notification() {
    return array(
      'rejection' => t('Rejection'),
      'bounce' => t('Bounce'),
    );
  }
  
  /**
   * Implements hook_taxonomy_term_delete()
   */
  function gb_maillist_taxonomy_term_delete($term) {
    if ($term->vocabulary_machine_name == 'forums') {
      _delete_all_list_records_for_tid($term->tid);
      _delete_all_received_email_records_for_tid($term->tid);
    }
  }
  

/**
 * implements hook_gdash_blocks
 */
function gb_maillist_gdash_blocks() {
  return array(
    'views' => array('forums-recent_block'),
  );
}
